{"version":3,"sources":["Components/ContactForm/ContactForm.js","Components/Filter/Filter.js","Components/ContactTable/ContactTable.js","views/ContactsView.js"],"names":["ContactForm","Form","useForm","form","useState","name","setName","contacts","useSelector","contactsSelectors","getContacts","console","log","dispatch","useDispatch","qwe","undefined","map","contact","includes","autoComplete","labelCol","xs","span","sm","wrapperCol","onFinish","e","contactsOperations","addContact","content","number","resetFields","Item","type","label","hasFeedback","validateStatus","help","pattern","onChange","currentTarget","value","placeholder","htmlType","Filter","changeFilter","target","ContactTable","filter","getFilter","dataSource","normalizedFilter","toLowerCase","item","key","id","columns","title","dataIndex","render","text","record","danger","onClick","deleteContact","ContactsView","useEffect","fetchContact"],"mappings":"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","file":"static/js/5.778a0ac1.chunk.js","sourcesContent":["import { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { contactsSelectors } from '../../redux/phonebook';\nimport { contactsOperations } from '../../redux/phonebook';\nimport { Form, Input, Button } from 'antd';\nexport default function ContactForm() {\n  const [form] = Form.useForm();\n  const [name, setName] = useState('');\n  const contacts = useSelector(contactsSelectors.getContacts);\n  console.log(contacts);\n  const dispatch = useDispatch();\n  const formItemLayout = {\n    labelCol: {\n      xs: {\n        span: 24,\n      },\n      sm: {\n        span: 6,\n      },\n    },\n    wrapperCol: {\n      xs: {\n        span: 24,\n      },\n      sm: {\n        span: 14,\n      },\n    },\n  };\n  const handleChange = e => {\n    console.log(e.currentTarget.value);\n    setName(e.currentTarget.value);\n    qwe();\n  };\n  const qwe = () => {\n    if (contacts !== undefined) {\n      return contacts.map(contact => contact.name).includes(name);\n    } else {\n      return;\n    }\n  };\n  const handleSubmit = e => {\n    dispatch(\n      contactsOperations.addContact({\n        name: e.content,\n        number: e.number,\n      }),\n    );\n    form.resetFields();\n    setName('');\n  };\n  return (\n    <Form\n      autoComplete=\"off\"\n      form={form}\n      {...formItemLayout}\n      onFinish={handleSubmit}\n    >\n      <Form.Item\n        type=\"text\"\n        name=\"content\"\n        label=\"\"\n        hasFeedback\n        validateStatus={name && qwe() === true ? 'warning' : null}\n        help={qwe() === true ? 'Это имя уже занято' : 'Введите имя контакта'}\n      >\n        <Input\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          onChange={handleChange}\n          placeholder=\"Name\"\n        />\n      </Form.Item>\n      <Form.Item\n        type=\"tel\"\n        help={'Введите номер телефона'}\n        name=\"number\"\n        label=\"\"\n      >\n        <Input\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          placeholder=\"xxx-xxx-xxx\"\n        />\n      </Form.Item>\n      <Form.Item label=\"\">\n        <Button type=\"primary\" htmlType=\"submit\">\n          Create contact\n        </Button>\n      </Form.Item>\n    </Form>\n  );\n}\n","import { useDispatch } from 'react-redux';\nimport { changeFilter } from '../../redux/phonebook/phonebook-actions';\nimport { Form, Input } from 'antd';\nexport default function Filter() {\n  const dispatch = useDispatch();\n\n  const formItemLayout = {\n    labelCol: {\n      xs: {\n        span: 24,\n      },\n      sm: {\n        span: 6,\n      },\n    },\n    wrapperCol: {\n      xs: {\n        span: 24,\n      },\n      sm: {\n        span: 14,\n      },\n    },\n  };\n  return (\n    <>\n      <Form.Item {...formItemLayout} type=\"text\" help={'Поиск по имени'}>\n        <Input\n          onChange={e => dispatch(changeFilter(e.target.value))}\n          type=\"text\"\n          placeholder=\"Find contact by name\"\n        />\n      </Form.Item>\n    </>\n  );\n}\n","import React from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useSelector } from 'react-redux';\r\nimport { contactsSelectors, contactsOperations } from '../../redux/phonebook';\r\nimport { Table, Button } from 'antd';\r\n\r\nconst ContactTable = () => {\r\n  const contacts = useSelector(contactsSelectors.getContacts);\r\n  const filter = useSelector(contactsSelectors.getFilter);\r\n  const dispatch = useDispatch();\r\n  const getFilteredContacts = () => {\r\n    const normalizedFilter = filter.toLowerCase();\r\n    return contacts.filter(contact =>\r\n      contact.name.toLowerCase().includes(normalizedFilter),\r\n    );\r\n  };\r\n  const asd = useSelector(getFilteredContacts);\r\n  const dataSource = asd.map(item => ({ ...item, key: item.id }));\r\n  const columns = [\r\n    {\r\n      title: 'Name',\r\n      dataIndex: 'name',\r\n      key: 'name',\r\n    },\r\n    {\r\n      title: 'Number',\r\n      dataIndex: 'number',\r\n      key: 'number',\r\n    },\r\n    {\r\n      title: 'Delete',\r\n      key: `name`,\r\n      render: (text, record) => (\r\n        <Button\r\n          key={text.id}\r\n          type=\"dashed\"\r\n          danger\r\n          htmlType=\"button\"\r\n          onClick={() => {\r\n            dispatch(contactsOperations.deleteContact(text.id));\r\n          }}\r\n        >\r\n          Delete\r\n        </Button>\r\n      ),\r\n    },\r\n  ];\r\n\r\n  return <Table columns={columns} dataSource={dataSource} />;\r\n};\r\nexport default ContactTable;\r\n","import { useDispatch } from 'react-redux';\nimport { useEffect } from 'react';\nimport { Row, Col } from 'antd';\nimport ContactForm from '../Components/ContactForm';\nimport Filter from '../Components/Filter';\nimport { contactsOperations } from '../redux/phonebook';\nimport ContactTable from '../Components/ContactTable/ContactTable';\n\nexport default function ContactsView() {\n  const dispatch = useDispatch();\n  useEffect(() => dispatch(contactsOperations.fetchContact()), [dispatch]);\n  return (\n    <Row>\n      <Col key={7} span={12}>\n        <ContactForm />\n      </Col>\n      <Col key={8} span={12}>\n        <Filter />\n        <ContactTable />\n      </Col>\n    </Row>\n  );\n}\n"],"sourceRoot":""}